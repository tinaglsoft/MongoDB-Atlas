name: Build

on: [push, pull_request]

jobs:    
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2

# SET ENVIRONMENT VARIABLES WE WILL USE IN LATER STEPS
# For more information on setting environment variables in GitHub Actions, 
# see https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable 

    - name: "Store current time in variable"
      run: echo "CURRENT_TIME=$(date +'%Y-%m-%d_%s')" >> $GITHUB_ENV

    - name: "Is this a push to the Main branch?"
      if: ${{ github.ref == 'refs/heads/main' }}
      run: echo "REALM_APP_ID=application-0-zimrw" >> $GITHUB_ENV

    - name: "Is this a push to the Staging branch?"
      if: ${{ github.ref == 'refs/heads/staging' }}
      run: echo "REALM_APP_ID=application-0-zimrw" >> $GITHUB_ENV

    - name: "Is this a push to a feature branch?"
      if: ${{ !env.REALM_APP_ID && github.event_name == 'push' }}
      run: | 

           # Create a new environment variable to store the name of the feature branch
           ref=$(echo ${{ github.ref }})
           branch=$(echo "${ref##*/}")
           echo "FEATURE_BRANCH=$branch" >> $GITHUB_ENV

           # Check if a Realm app already exists for this feature branch
           # Note: this requires the IP address of the GitHub Actions vm to be in the Atlas access list  
           output=$(mongo "mongodb+srv://${{ secrets.ATLAS_URI_FEATURE_BRANCHES }}/GitHubActionsMetadata" --username ${{ secrets.ATLAS_USERNAME_FEATURE_BRANCHES }} --password ${{ secrets.ATLAS_PASSWORD_FEATURE_BRANCHES }} --eval "db.metadata.findOne({'branch': '$branch'})")

           if [[ $output == *null ]]; then
              echo "No Realm app found for this branch. A new app will be pushed later in this workflow"
           else
              echo "A Realm app was found for this branch. Updates will be pushed to the existing app later in this workflow"
              app_id=$(echo $output | sed 's/^.*realm_app_id" : "\([^"]*\).*/\1/')
              echo "REALM_APP_ID=$app_id" >> $GITHUB_ENV
           fi

           # Update the databaseName in the development.json environment file
           # Set the database name to contain the branch name to ensure it's unique
           cd inventory/export/sync/environments
           printf '{\n     "values": {"databaseName": "InventoryDemo-%s"}\n}' "$branch" > development.json     

           # Indicate that the Realm app should use the development environment by updating realm_config.json
           cd ..
           sed -i txt 's/{/{ "environment": "development",/' realm_config.json

# For Pull Requests, create a new Realm app with a new database
# The Realm app will be stored in an Atlas project used only for CI/CD
# The Realm app should use the Testing environment
# For more information on Realm environments, 
# see https://docs.mongodb.com/realm/values-and-secrets/define-environment-values/
    - name: "Set environment variables for all other runs"
      if: ${{ github.event_name == 'pull_request' }}
      run: | 

           # Create a new environment variable named IS_DYNAMICALLY_GENERATED_APP to indicate this is
           # a dynamically generated app that should be deleted later in this workflow
           echo "IS_DYNAMICALLY_GENERATED_APP=true" >> $GITHUB_ENV
           
           # Update the databaseName in the testing.json environment file
           # Set the database name to contain the current time to ensure it's unique
           cd inventory/export/sync/environments
           printf '{\n     "values": {"databaseName": "InventoryDemo-%s"}\n}' "${{ env.CURRENT_TIME }}" > testing.json     
           
           # Indicate that the Realm app should use the Testing environment by updating realm_config.json
           cd ..
           sed -i txt 's/{/{ "environment": "testing",/' realm_config.json 
           

# INSTALL THE REALM-CLI AND AUTHENTICATE

# For more information on the MongoDB Realm CLI, 
# see https://docs.mongodb.com/realm/deploy/realm-cli-reference/
# Adding --realm-url and --atlas-url to login command to workaround authentication error  
    - name: "Install the Realm CLI & authenticate"
      run: |
           npm install -g mongodb-realm-cli@beta
           realm-cli login --api-key="${{ secrets.REALM_API_PUBLIC_KEY }}" --private-api-key="${{ secrets.REALM_API_PRIVATE_KEY }}" --realm-url https://realm.mongodb.com --atlas-url https://cloud.mongodb.com

# RUN TESTS

# If we are pushing to the main branch (meaning we are pushing to production),
# store the archive in a GitHub release
# Alternatively, you could upload the app directly for beta testing and/or release
    - name: "Store the Archive in a GitHub Release"
      uses: softprops/action-gh-release@v1
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
          files: |
            inventory/clients/ios-swiftui/InventoryDemo/build/InventoryDemo.ipa
          tag_name: ${{ env.CURRENT_TIME }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# CLEANUP

# Delete the database associated with the Realm app
# Note: this requires the IP address of the GitHub Actions vm to be in the Atlas access list   
    - name: "Delete dynamically generated database"
      if: ${{ env.IS_DYNAMICALLY_GENERATED_APP }}
      run: |
           mongo "mongodb+srv://${{ secrets.ATLAS_URI_PULL_REQUESTS }}/InventoryDemo-${{ env.CURRENT_TIME }}" --username ${{ secrets.ATLAS_USERNAME_PULL_REQUESTS }} --password ${{ secrets.ATLAS_PASSWORD_PULL_REQUESTS }} --eval "db.dropDatabase()"

# AUTOMATICALLY PUSH COMMITS FROM STAGING BRANCH TO MAIN BRANCH  

# If this is a push to the Staging branch AND all tests have passed,
# push the commit(s) to the main branch (production)
# Could skip this step if you want to manually run tests on staging
# or want fewer releases to production
  pushToMainBranch:
    runs-on: macos-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/staging' }}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: "Push to the Main branch"
      run: |
           git merge origin/staging
           git push