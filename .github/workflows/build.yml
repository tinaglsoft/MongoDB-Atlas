name: Build

on: [push, pull_request]

jobs:    
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2

# SET ENVIRONMENT VARIABLES WE WILL USE IN LATER STEPS
# For more information on setting environment variables in GitHub Actions, 
# see https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable 

    - name: "Store current time in variable"
      run: echo "CURRENT_TIME=$(date +'%Y-%m-%d_%s')" >> $GITHUB_ENV

    - name: "Is this a push to the Main branch?"
      if: ${{ github.ref == 'refs/heads/main' }}
      run: echo "REALM_APP_ID=application-cicd-hrhpz" >> $GITHUB_ENV

    - name: "Is this a push to the Staging branch?"
      if: ${{ github.ref == 'refs/heads/staging' }}
      run: echo "REALM_APP_ID=application-cicd-hrhpz" >> $GITHUB_ENV

    - name: "Is this a push to a feature branch?"
      if: ${{ !env.REALM_APP_ID && github.event_name == 'push' }}
      run: | 

           # Create a new environment variable to store the name of the feature branch
           ref=$(echo ${{ github.ref }})
           branch=$(echo "${ref##*/}")
           echo "FEATURE_BRANCH=$branch" >> $GITHUB_ENV

           # Check if a Realm app already exists for this feature branch
           # Note: this requires the IP address of the GitHub Actions vm to be in the Atlas access list  
           output=$(mongo "mongodb+srv://${{ secrets.ATLAS_URI_FEATURE_BRANCHES }}/GitHubActionsMetadata" --username ${{ secrets.ATLAS_USERNAME_FEATURE_BRANCHES }} --password ${{ secrets.ATLAS_PASSWORD_FEATURE_BRANCHES }} --eval "db.metadata.findOne({'branch': '$branch'})")

           if [[ $output == *null ]]; then
              echo "No Realm app found for this branch. A new app will be pushed later in this workflow"
           else
              echo "A Realm app was found for this branch. Updates will be pushed to the existing app later in this workflow"
              app_id=$(echo $output | sed 's/^.*realm_app_id" : "\([^"]*\).*/\1/')
              echo "REALM_APP_ID=$app_id" >> $GITHUB_ENV
           fi

           # Update the databaseName in the development.json environment file
           # Set the database name to contain the branch name to ensure it's unique
           cd inventory/export/sync/environments
           printf '{\n     "values": {"databaseName": "InventoryDemo-%s"}\n}' "$branch" > development.json     

           # Indicate that the Realm app should use the development environment by updating realm_config.json
           cd ..
           sed -i txt 's/{/{ "environment": "development",/' realm_config.json

# For Pull Requests, create a new Realm app with a new database
# The Realm app will be stored in an Atlas project used only for CI/CD
# The Realm app should use the Testing environment
# For more information on Realm environments, 
# see https://docs.mongodb.com/realm/values-and-secrets/define-environment-values/
    - name: "Set environment variables for all other runs"
      if: ${{ github.event_name == 'pull_request' }}
      run: | 

           # Create a new environment variable named IS_DYNAMICALLY_GENERATED_APP to indicate this is
           # a dynamically generated app that should be deleted later in this workflow
           echo "IS_DYNAMICALLY_GENERATED_APP=true" >> $GITHUB_ENV
           
           # Update the databaseName in the testing.json environment file
           # Set the database name to contain the current time to ensure it's unique
           cd inventory/export/sync/environments
           printf '{\n     "values": {"databaseName": "InventoryDemo-%s"}\n}' "${{ env.CURRENT_TIME }}" > testing.json     
           
           # Indicate that the Realm app should use the Testing environment by updating realm_config.json
           cd ..
           sed -i txt 's/{/{ "environment": "testing",/' realm_config.json 
           

# INSTALL THE REALM-CLI AND AUTHENTICATE

# For more information on the MongoDB Realm CLI, 
# see https://docs.mongodb.com/realm/deploy/realm-cli-reference/
# Adding --realm-url and --atlas-url to login command to workaround authentication error  
    - name: "Install the Realm CLI & authenticate"
      run: |
           npm install -g mongodb-realm-cli@beta
           realm-cli login --api-key="${{ secrets.REALM_API_PUBLIC_KEY }}" --private-api-key="${{ secrets.REALM_API_PRIVATE_KEY }}" --realm-url https://realm.mongodb.com --atlas-url https://cloud.mongodb.com

# PUSH THE REALM APP

    - name: "Push updated copy of the Realm app for existing apps (Main, Staging, or Feature branches)"
      if: ${{ env.REALM_APP_ID }}
      run: | 
           cd export
           realm-cli push --remote="${{ env.REALM_APP_ID }}" -y

    - name: "Create a new Realm app for feature branches where the Realm app does not yet exist"
      if: ${{ env.REALM_APP_ID == null && github.event_name == 'push' }}
      run: | 

           # Push to the Atlas project specifically for feature branches
           cd export
           realm-cli push -y --project 64e59918958cca7a91da52a2

           # Retrieve and store the Realm App ID from the output of 'realm-cli app describe'
           output=$(realm-cli app describe)
           app_id=$(echo $output | sed 's/^.*client_app_id": "\([^"]*\).*/\1/')
           echo "REALM_APP_ID=$app_id" >> $GITHUB_ENV

           # Store the Realm App ID in the GitHubActionsMetadata database
           # Note: this requires the IP address of the GitHub Actions vm to be in the Atlas access list  
           mongo "mongodb+srv://${{ secrets.ATLAS_URI_FEATURE_BRANCHES }}/GitHubActionsMetadata" --username ${{ secrets.ATLAS_USERNAME_FEATURE_BRANCHES }} --password ${{ secrets.ATLAS_PASSWORD_FEATURE_BRANCHES }} --eval "db.metadata.insertOne({'branch': '${{ env.FEATURE_BRANCH}}', 'realm_app_id': '$app_id'})"

    - name: "Create a new Realm app for pull requests"
      if: ${{ github.event_name == 'pull_request' }}
      run: | 

           # Push to the Atlas project specifically for pull requests
           cd inventory/export/sync
           realm-cli push -y --project 64e59918958cca7a91da52a2

           # Retrieve and store the Realm App ID from the output of 'realm-cli app describe'
           output=$(realm-cli app describe)
           app_id=$(echo $output | sed 's/^.*client_app_id": "\([^"]*\).*/\1/')
           echo "REALM_APP_ID=$app_id" >> $GITHUB_ENV

# STORE THE REALM APP ID IN THE MOBILE APP CODE

    - name: "Create realm-app-id.txt that stores the Realm app ID"
      run: echo "${{ env.REALM_APP_ID }}" > $PWD/inventory/clients/ios-swiftui/InventoryDemo/realm-app-id.txt

# RUN TESTS

# Build the app for testing and then run the tests using a variety of simulators
# If you have integration tests, you could also choose to checkout previous releases
# and run the integration tests against the current version of the Realm app to
# ensure backwards compatibility 
    - name: "Build mobile app & run tests"
      run: |
           cd inventory/clients/ios-swiftui/InventoryDemo

           # Build the app for testing
           xcodebuild -project InventoryDemo.xcodeproj -scheme "ci" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12 Pro Max,OS=latest' -derivedDataPath './output' build-for-testing

           # Define the simulators that will be used for testing
           iPhone12Pro='platform=iOS Simulator,name=iPhone 12 Pro Max,OS=latest'
           iPhone12='platform=iOS Simulator,name=iPhone 12,OS=latest'
           iPadPro4='platform=iOS Simulator,name=iPad Pro (12.9-inch) (4th generation)'

           # Run the tests on a variety of simulators
           # Optionally, could put these in separate jobs to run in parallel
           xcodebuild -project InventoryDemo.xcodeproj -scheme "ci" -sdk iphonesimulator -destination "$iPhone12Pro" -derivedDataPath './output' test-without-building
           xcodebuild -project InventoryDemo.xcodeproj -scheme "ci" -sdk iphonesimulator -destination "$iPhone12" -derivedDataPath './output' test-without-building     
           xcodebuild -project InventoryDemo.xcodeproj -scheme "ci" -sdk iphonesimulator -destination "$iPadPro4" -derivedDataPath './output' test-without-building

# ARCHIVE THE APP (ONLY FOR PUSHES TO THE MAIN BRANCH)

# If we are pushing to the main branch (meaning we are pushing to production),
# install the Apple certificate and provisioning profile
# These need to be installed in order to create the archive
# The code from this step is taken from GitHub Actions documentation available
# at https://docs.github.com/en/actions/guides/installing-an-apple-certificate-on-macos-runners-for-xcode-development 
# CC-BY Attribution 4.0 International License: https://github.com/github/docs/blob/main/LICENSE    
    - name: "Install the Apple certificate and provisioning profile (so we can create the archive)"
      if: ${{ github.ref == 'refs/heads/main' }}
      env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

# If we are pushing to the main branch (meaning we are pushing to production),
# create the mobile app archive (.ipa file)
    - name: "Archive the mobile app"
      if: ${{ github.ref == 'refs/heads/main' }}
      run: |
           cd inventory/clients/ios-swiftui/InventoryDemo
           xcodebuild -workspace InventoryDemo.xcodeproj/project.xcworkspace/ -scheme ci archive -archivePath $PWD/build/ci.xcarchive -allowProvisioningUpdates
           xcodebuild -exportArchive -archivePath $PWD/build/ci.xcarchive -exportPath $PWD/build -exportOptionsPlist $PWD/build/ci.xcarchive/Info.plist

# If we are pushing to the main branch (meaning we are pushing to production),
# store the archive in a GitHub release
# Alternatively, you could upload the app directly for beta testing and/or release
    - name: "Store the Archive in a GitHub Release"
      uses: softprops/action-gh-release@v1
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
          files: |
            inventory/clients/ios-swiftui/InventoryDemo/build/InventoryDemo.ipa
          tag_name: ${{ env.CURRENT_TIME }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# CLEANUP

# If a Realm app was dynamically generated, delete the app and its associated database
# Alternatively, you could choose to skip deleting apps and their databases when
# the tests fail to allow for manual investigation
    - name: "Delete dynamically generated Realm app"
      if: ${{ env.IS_DYNAMICALLY_GENERATED_APP }}
      run: realm-cli app delete --app ${{ env.REALM_APP_ID }}

# Delete the database associated with the Realm app
# Note: this requires the IP address of the GitHub Actions vm to be in the Atlas access list   
    - name: "Delete dynamically generated database"
      if: ${{ env.IS_DYNAMICALLY_GENERATED_APP }}
      run: |
           mongo "mongodb+srv://${{ secrets.ATLAS_URI_PULL_REQUESTS }}/InventoryDemo-${{ env.CURRENT_TIME }}" --username ${{ secrets.ATLAS_USERNAME_PULL_REQUESTS }} --password ${{ secrets.ATLAS_PASSWORD_PULL_REQUESTS }} --eval "db.dropDatabase()"

# AUTOMATICALLY PUSH COMMITS FROM STAGING BRANCH TO MAIN BRANCH  

# If this is a push to the Staging branch AND all tests have passed,
# push the commit(s) to the main branch (production)
# Could skip this step if you want to manually run tests on staging
# or want fewer releases to production
  pushToMainBranch:
    runs-on: macos-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/staging' }}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: "Push to the Main branch"
      run: |
           git merge origin/staging
           git push